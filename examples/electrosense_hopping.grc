options:
  parameters:
    author: Sreeraj Rajendran
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: Electrosense sensor code
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: electrosense_hopping
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Electosense
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: alpha
  id: variable
  parameters:
    comment: ''
    value: '0.75'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 5]
    rotation: 0
    state: enabled
- name: cfreq
  id: variable
  parameters:
    comment: ''
    value: scanning.step(start_f,end_f,samp_rate/1.5,prober,hop_mode,0.8,0.8)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 180]
    rotation: 0
    state: enabled
- name: fft_size
  id: variable
  parameters:
    comment: ''
    value: '512'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 5]
    rotation: 0
    state: enabled
- name: hop_mode
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 84]
    rotation: 0
    state: enabled
- name: navg_vectors
  id: variable
  parameters:
    comment: ''
    value: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 100]
    rotation: 0
    state: enabled
- name: ppm
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 84]
    rotation: 0
    state: enabled
- name: prober
  id: variable_function_probe
  parameters:
    block_id: vecprobe
    comment: ''
    function_args: ''
    function_name: level
    poll_rate: 1/(tune_delay+(1/samp_rate*fft_size*navg_vectors))
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 80]
    rotation: 0
    state: enabled
- name: rfgain
  id: variable
  parameters:
    comment: ''
    value: '40'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 156]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 2e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 160]
    rotation: 0
    state: enabled
- name: sensorid
  id: variable
  parameters:
    comment: ''
    value: '123456'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 5]
    rotation: 0
    state: enabled
- name: tune_delay
  id: variable
  parameters:
    comment: ''
    value: 50e-3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 36]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 324]
    rotation: 0
    state: enabled
- name: blocks_keep_one_in_n_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: navg_vectors
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 316]
    rotation: 0
    state: enabled
- name: blocks_nlog10_ff_0
  id: blocks_nlog10_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    n: '1'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 636]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 324]
    rotation: 0
    state: enabled
- name: electrosense_discard_samples_0
  id: electrosense_discard_samples
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    mode: varchange
    nsamples: int(tune_delay * samp_rate)
    tag_name: pmt.intern("burst_len")
    var: int(cfreq)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 600]
    rotation: 0
    state: enabled
- name: end_f
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: End Frequency
    short_id: ''
    type: eng_float
    value: 500e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 536]
    rotation: 0
    state: enabled
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fft_size
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fft_size)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 416]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import pmt
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 88]
    rotation: 0
    state: enabled
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    ref_level: '0'
    showports: 'True'
    update_time: '0.10'
    vlen: fft_size
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"x-Axis"'
    x_start: '0'
    x_step: '1.0'
    x_units: '""'
    y_axis_label: '"y-Axis"'
    y_units: '""'
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 548]
    rotation: 0
    state: enabled
- name: rtlsdr_source_0
  id: rtlsdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant2: ''
    ant3: ''
    ant4: ''
    args: ''
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain2: '20'
    bb_gain3: '20'
    bb_gain4: '20'
    bw0: 250e3
    bw1: '0'
    bw2: '0'
    bw3: '0'
    bw4: '0'
    comment: ''
    corr0: ppm
    corr1: '0'
    corr2: '0'
    corr3: '0'
    corr4: '0'
    dc_offset_mode0: '2'
    dc_offset_mode1: '0'
    dc_offset_mode2: '0'
    dc_offset_mode3: '0'
    dc_offset_mode4: '0'
    freq0: cfreq
    freq1: 100e6
    freq2: 100e6
    freq3: 100e6
    freq4: 100e6
    gain0: rfgain
    gain1: '10'
    gain2: '10'
    gain3: '10'
    gain4: '10'
    gain_mode0: 'True'
    gain_mode1: 'True'
    gain_mode2: 'True'
    gain_mode3: 'True'
    gain_mode4: 'True'
    if_gain0: '20'
    if_gain1: '20'
    if_gain2: '20'
    if_gain3: '20'
    if_gain4: '20'
    iq_balance_mode0: '2'
    iq_balance_mode1: '0'
    iq_balance_mode2: '0'
    iq_balance_mode3: '0'
    iq_balance_mode4: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    sample_rate: samp_rate
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 261]
    rotation: 0
    state: enabled
- name: scanning
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\ncur=-1.0\n\
      fft_arr={}\nsim_arr={}\nsim_red = 1.05\n\nimport numpy as np\nimport random\n\
      \ndef crosscorr(x,y):\n    a = np.correlate(x, y, mode='full')\n    norm = np.sqrt(np.power(x,2).sum())\
      \ *  np.sqrt(np.power(y,2).sum())\n    #a = (a - np.mean(a)) / (np.std(a) *\
      \ len(a))\n    #return np.nan_to_num(a)\n    return np.nan_to_num(a/norm)\n\n\
      def sim2prob(x):\n    return np.exp(x)/np.exp(x).sum()\n\ndef upd_sim_arr():\n\
      \    vals = np.array(sim_arr.values())\n    keys = np.array(sim_arr.keys())\n\
      \    prob = sim2prob(vals)\n    prob = prob >= np.random.rand()\n    vals[prob]=vals[prob]/sim_red\n\
      \    for i in range(len(keys)):\n        sim_arr[keys[i]] = vals[i]\n    return\
      \ min(sim_arr, key=sim_arr.get)\n\ndef step(start,end,incr,val,mode,wt,alpha_s):\n\
      \    global cur\n    global fft_arr, sim_arr\n\n    #sequential scanning\n \
      \   if mode==0:\n        cur=cur+incr\n    #random scanning\n    elif mode ==\
      \ 1:\n        rval = int(((end-start)/incr)+0.5)\n        cur=cur+incr*random.randint(1,rval)\n\
      \    #similarity scanning\n    else:\n        if(fft_arr.has_key(cur)):\n  \
      \          cc = crosscorr(fft_arr[cur],val)\n            delf = cc.max()\n \
      \           r = np.argmax(cc)\n            #print r, wt, delf\n            sim\
      \  = r * wt + (1-wt) * delf\n            if(sim_arr.has_key(cur)):\n       \
      \         pass\n            else:\n                sim_arr[cur]=0\n        \
      \    sim_arr[cur] = alpha_s * sim + sim_arr[cur] * (1-alpha_s)\n           \
      \ new=upd_sim_arr()\n            #print \"new:\",new\n            #print \"\
      sim:\",sim_arr\n        else:\n            if(cur>0):\n                sim_arr[cur]=0\n\
      \            new=cur+incr\n        fft_arr[cur]= val\n        cur=new\n\n  \
      \  if (cur > end or cur < start):\n        cur = start\n    print cur\n    return\
      \ cur\n\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 20]
    rotation: 0
    state: enabled
- name: single_pole_iir_filter_xx_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: alpha
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 436]
    rotation: 0
    state: enabled
- name: start_f
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Start frequency
    short_id: ''
    type: eng_float
    value: 50e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 448]
    rotation: 0
    state: enabled
- name: vecprobe
  id: blocks_probe_signal_vx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    type: float
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 288]
    rotation: 0
    state: enabled

connections:
- [blocks_complex_to_mag_squared_0, '0', single_pole_iir_filter_xx_0, '0']
- [blocks_keep_one_in_n_0, '0', blocks_nlog10_ff_0, '0']
- [blocks_keep_one_in_n_0, '0', vecprobe, '0']
- [blocks_nlog10_ff_0, '0', qtgui_vector_sink_f_0, '0']
- [blocks_stream_to_vector_0, '0', fft_vxx_0, '0']
- [electrosense_discard_samples_0, '0', blocks_stream_to_vector_0, '0']
- [fft_vxx_0, '0', blocks_complex_to_mag_squared_0, '0']
- [rtlsdr_source_0, '0', electrosense_discard_samples_0, '0']
- [single_pole_iir_filter_xx_0, '0', blocks_keep_one_in_n_0, '0']

metadata:
  file_format: 1
